// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

model User {
  id               Int                   @id @default(autoincrement())
  createdTime      DateTime              @default(now())
  updatedTime      DateTime              @updatedAt
  username         String //用户名
  password         String //密码
  avatar           String? //头像
  status           Boolean               @default(true) //状态1为开启0为未开启
  // profile  Profile?
  // post     Post[]
  articles         Article[]
  articleFavorites UserArticleFavorite[]
  commentUsers     UserArticleComment[]  @relation("commentUser")
  replyUsers       UserArticleComment[]  @relation("replyUser")
  articleLikes  UserArticleLike[]
  searchs  UserSearch[]
  articleViews UserArticleView[]
  articleReports UserArticleReport[]
  devices SysUserDevice[]
}

// 文章类别
model ArticleCategory {
  id          Int       @id @default(autoincrement())
  createdTime DateTime  @default(now())
  updatedTime DateTime  @updatedAt
  name        String // 类别名称
  keywords    String? //关键词
  description String? //描述
  sort        Int       @default(0) // 排序
  status      Boolean   @default(true) // 是否启用 1 启用 0 禁用
  articles    Article[]
}

// 文章
model Article {
  id              Int                  @id @default(autoincrement())
  createdTime     DateTime             @default(now())
  updatedTime     DateTime             @updatedAt
  title           String               @db.VarChar(255) // 文章标题
  isTop           Boolean              @default(false) // 置顶 false:否、true:是
  content         String //文章内容
  coverType       Int                  @default(0) // 封面类型 0-无图，1-1张，3-3张,10:自动
  coverImg        String? // 封面的URL地址
  commentCount    Int                  @default(0) // 评论数
  likeCount       Int                  @default(0) // 点赞数
  collectCount    Int                  @default(0) // 收藏数
  readCount       Int                  @default(0) // 阅读数
  status          Int?                 @default(1) // 状态(0:草稿;1:审核中;2:审核通过;3审核失败;4:回收站)
  author          User?                @relation(fields: [authorId], references: [id])
  authorId        Int?
  category        ArticleCategory?     @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  collects        UserArticleCollect[]
  comments        UserArticleComment[]
  articleLikes UserArticleLike[]
  articleViews UserArticleView[]
  articleReports UserArticleReport[]
}

// 用户文章收藏夹
model UserArticleFavorite {
  id          Int                  @id @default(autoincrement())
  createdTime DateTime             @default(now())
  updatedTime DateTime             @updatedAt
  name        String
  user        User?                @relation(fields: [userId], references: [id])
  userId      Int
  collects    UserArticleCollect[]
}

// 用户文章收藏表
model UserArticleCollect {
  id          Int                  @id @default(autoincrement())
  createdTime DateTime             @default(now())
  updatedTime DateTime             @updatedAt
  article     Article?             @relation(fields: [articleId], references: [id])
  articleId   Int
  favorite    UserArticleFavorite? @relation(fields: [favoriteId], references: [id])
  favoriteId  Int
}

// 用户文章评论表
model UserArticleComment {
  id            Int      @id @default(autoincrement())
  createdTime   DateTime @default(now())
  updatedTime   DateTime @updatedAt
  parentId      Int?     @default(0) // 父id，父id为0说明评论文章，否则为回复评论
  content       String //评论内容
  isTop         Int?     @default(0) // 置顶 0:否、1:是
  commentCount  Int?     @default(0) // 评论数
  likeCount     Int?     @default(0) // 点赞数
  status        Int?     @default(2) // 是状态(1:审核中;2:审核通过;3审核失败;)
  article       Article? @relation(fields: [articleId], references: [id])
  articleId     Int //被评论的文章
  commentUser   User?    @relation("commentUser", fields: [commentUserId], references: [id])
  commentUserId Int //评论用户id
  replyUser     User?    @relation("replyUser", fields: [replyUserId], references: [id])
  replyUserId   Int //被回复的用户id
}

// 用户文章点赞表
model UserArticleLike {
  id        Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int
  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int
}

// 用户搜索表
model UserSearch {
  id          Int      @id @default(autoincrement())
  createdTime   DateTime @default(now())
  updatedTime   DateTime @updatedAt
  searchCount Int      @default(1) // 搜索的次数
  keywords    String //搜索关键词
  type        Int // 搜索类型 1 文章 2 用户 3 评论 4 专栏 5 问答
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int // 搜索的用户id
}

// 用户文章浏览表
model UserArticleView {
  id          Int      @id @default(autoincrement())
  createdTime   DateTime @default(now())
  updatedTime   DateTime @updatedAt
  viewCount Int?      @default(1) // 浏览的次数
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int // // 浏览文章的用户id
  article     Article?  @relation(fields: [articleId], references: [id])
  articleId   Int //被浏览的文章id
}

// 文章举报表
model UserArticleReport {
  id        Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
  type      Int      @default(0) // 举报类型： 0-其他问题，1-标题夸张，2-低俗色情，3-错别字多，4-旧闻重复，5-广告软文，6-内容不实，7-涉嫌违法犯罪，8-侵权
  remark    String //举报描述文字
  status    Int?      @default(1) //审核状态(0:审核失败;1:审核中;2:审核完成,内容未违规,3:审核完成,内容违规已删除该文章)
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int  // 举报的用户id
  article   Article?  @relation(fields: [articleId], references: [id])
  articleId Int //被举报的文章id
}

// 用户设备
model SysUserDevice {
  id          Int      @id @default(autoincrement())
  createdTime   DateTime @default(now())
  updatedTime   DateTime @updatedAt
  deviceOs          String // 设备系统
  deviceNo    String // 设备编号
  deviceBrand String // 设备品牌
  status      Boolean?      @default(false) // '准入状态 true 准入 false不准入
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int
}

// 系统字典管理
model SysDataDict {
  id        Int      @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
  name      String //字典名称
  type      String //字典类型
  remark    String? //备注
  status    Boolean?  @default(true) //状态
  dictDatas SysDataDictData[]
}

// 系统字典数据
model SysDataDictData {
  id        Int            @id @default(autoincrement())
  createdTime DateTime @default(now())
  updatedTime DateTime @updatedAt
  label     String //数据标签
  value     String //数据键值
  class     String? //样式属性Class
  sort      Int?            @default(0) //顺序
  remark    String? //备注
  status    Boolean?        @default(true) //状态d
  colorType String?         @default("default") //颜色类型 success primary default info warning danger
  dict      SysDataDict? @relation(fields: [dictId], references: [id])
  dictId    Int
}