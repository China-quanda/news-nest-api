// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id               Int             @id @default(autoincrement())
  username         String //用户名
  password         String //密码
  avatar           String? //头像
  status           Boolean         @default(true) //状态1为开启0为未开启
  profile          Profile?
  Article          Article[]
  ArticleComment   ArticleComment? @relation(fields: [articleCommentId], references: [id])
  articleCommentId Int?
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String //角色名称
  key         String //权限字符
  description String? //角色描述
  sort        Int     @default(0) // 排序
  isDefault   Boolean @default(false) //是否为默认注册角色
  status      Boolean @default(true) //状态1为开启0为未开启
  users       User[]
}

// 菜单
model Menu {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  parentId      Int? // 父菜单ID
  name          String // 菜单名称
  type          Int // 类型 0:目录 1:菜单 2:接口 4:按钮
  icon          String? //图标
  isFrame       Boolean  @default(false) // 是否外链 0不是 1是
  path          String //路由地址
  isVisible     Boolean  @default(false) // 是否可见 0不可见 1可见 是否显示：选择隐藏时，路由将不会出现在侧边栏，但仍然可以访问 显示状态 0不显示 1显示
  alwaysShow    Boolean  @default(false) //总是显示：选择不是时，当该菜单只有一个子菜单时，不展示自己，直接展示子菜单
  status        Boolean  @default(true) // true 正常 false 禁用
  component     String // 组件路径
  componentName String // 组件名字
  perms         String? //权限标识 权限字符 接口权限独有
  query         String //路由参数query
  params        String //路由参数params
  isCache       Boolean  @default(false) // 是否缓存：选择缓存时，则会被 `keep-alive` 缓存，必须填写「组件名称」字段 是否缓存 0不是 1是
  sort          Int      @default(0) // 排序
}


// 文章
model Article {
  id                Int              @id @default(autoincrement())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  title             String           @db.VarChar(255) // 文章标题
  isTop             Int              @default(0) // 置顶 0:否、1:是
  content           String? //文章内容
  coverType         Int              @default(0) // 封面类型 0-无图，1-1张，3-3张,10:自动
  coverImg          String // 封面的URL地址
  commentCount      Int              @default(0) // 评论数
  likeCount         Int              @default(0) // 点赞数
  collectCount      Int              @default(0) // 收藏数
  readCount         Int              @default(0) // 阅读数
  status            Int              @default(1) // 状态(0:草稿;1:审核中;2:审核通过;3审核失败;4:回收站)
  author            User             @relation(fields: [authorId], references: [id])
  authorId          Int
  ArticleCategory   ArticleCategory? @relation(fields: [articleCategoryId], references: [id])
  articleCategoryId Int?
  ArticleComment    ArticleComment?  @relation(fields: [articleCommentId], references: [id])
  articleCommentId  Int?
}

// 用户文章收藏表
model UserArticleCollect {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  article   Article  @relation(fields: [articleId], references: [id])
  articleId Int
}

// 文章评论点赞表
model ArticleCommentLike {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  userId    Int
  comment   ArticleComment @relation(fields: [commentId], references: [id])
  commentId Int
}


// 用户授权表
model Auth {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      Int // // 授权的用户id
  type        String // 第三方登录类型(微信/QQ/微博等)
  openId      String // 第三方id
  accessToken String? // 第三方登录的accessToken
  expires_in  String? //expires_in过期时间
}

// 用户粉丝表
model UserFans {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedA
  foller    User     @relation(fields: [follerId], references: [id])
  follerId  Int //关注者(粉丝)id
  follerd   User     @relation(fields: [follerdId], references: [id])
  follerdId Int // 被关注的用户id
}

// 验证表
model VerifyCode {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedA
  account     String //要验证的账户
  code        String //验证码
  verifyCount Int //验证次数
  expiresIn   String //expires_in过期时间
  type        Int // 类型(1:手机;2:邮箱;)
  status      Boolean  @default(false) //是否已验证成功 1 true ｜ 0 false
}

// 验证码
model QrCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedA
  account   String //要验证的账户
  expiresIn String //expires_in过期时间
  type      Int // 二维码类型
  url       String? //二维码地址
  status    Int      @default(1) //状态 1:未确认 2:已扫码 3:确认授权 4:取消授权 5:已过期 
}




// 系统Oss
model SystemDataOss {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String //oss名称
  type       Int //类型 1本地上传 2七牛 3阿里云 4腾讯云
  domain     String? //域名 绑定的域名，如：http://cdn.aofengjt.com
  prefix     String? //路径前缀
  localPath  String? //存储目录 类型 本地才有
  bucketName String? //储空间名 类型 七牛 阿里云 腾讯云才有

  qiniuAccessKey String? //七牛AccessKey 类型 七牛云才有
  qiniuSecretKey String? //七牛SecretKey 类型 七牛云才有

  aliyunEndPoint        String? //阿里云EndPoint 类型 阿里云才有
  aliyunAccessKeyId     String? //阿里云AccessKeyId 类型 阿里云才有
  aliyunAccessKeySecret String? //阿里云AccessKeySecret 类型 阿里云才有

  qcloudAppId     String? //腾讯云AppId 类型 腾讯云才有
  qcloudSecretId  String? //腾讯云SecretId 类型 腾讯云才有
  qcloudSecretKey String? //腾讯云SecretKey 类型 腾讯云才有
  region          String? //所属地区 类型 腾讯云才有
}

// 
// 系统管理-日志管理-操作日志 
// system-log-operlog

model SystemLogOperLog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int? // 用户ID
  action    String // 行为
  ip        String? //ip
  ipAddr    String? // ip地址
  params    String? //参数
}