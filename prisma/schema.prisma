// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma 模型命名规则 https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#naming-conventions
// 1. 命名需要符合以下正则表达式：[A-Za-z][A-Za-z0-9_]*
// 2. 以字母开头，遵循帕斯卡命名法（Pascal Case）
// 3. 模型命名用单数而不是复数，例如 User，而不是 users
// 4. 避开保留字，https://github.com/prisma/prisma/blob/main/packages/client/src/generation/generateClient.ts#L376
// 5. 自定义表名使用@@map，通常为蛇形命名（snake_case）
// npx prisma migrate dev --name "edit"      

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

model User {
  id               Int                            @id @default(autoincrement())
  createTime       DateTime                       @default(now()) @map("create_time")
  updateTime       DateTime                       @updatedAt @map("update_time")
  username         String //用户名
  password         String //密码
  avatar           String? //头像
  status           Boolean                        @default(true) //状态1为开启0为未开启
  // profile  Profile?
  // post     Post[]
  articles         Article[]
  articleFavorites UserArticleFavorite[]
  commentUsers     UserArticleComment[]           @relation("commentUser")
  replyUsers       UserArticleComment[]           @relation("replyUser")
  articleLikes     UserArticleLike[]
  searchs          UserSearch[]
  articleViews     UserArticleView[]
  articleReports   UserArticleReport[]
  devices          SystemPermissionMobileDevice[]
  pushUsers        SystemMessagePush[]
  loginLogs        SystemLogLoginLog[]

  @@map("news_user")
}

// 文章类别
model ArticleCategory {
  id          Int       @id @default(autoincrement())
  createTime  DateTime  @default(now()) @map("create_time")
  updateTime  DateTime  @updatedAt @map("update_time")
  name        String // 类别名称
  keywords    String? //关键词
  description String? //描述
  sort        Int       @default(0) // 排序
  status      Boolean   @default(true) // 是否启用 1 启用 0 禁用
  articles    Article[]

  @@map("news_article_category")
}

// 文章
model Article {
  id             Int                  @id @default(autoincrement())
  createTime     DateTime             @default(now()) @map("create_time")
  updateTime     DateTime             @updatedAt @map("update_time")
  title          String               @db.VarChar(255) // 文章标题
  isTop          Boolean              @default(false) @map("is_top") // 置顶 false:否、true:是
  content        String //文章内容
  coverType      Int                  @default(0) @map("cover_type") // 封面类型 0-无图，1-1张，3-3张,10:自动 
  coverImg       String?              @map("cover_img") // 封面的URL地址
  commentCount   Int                  @default(0) @map("comment_count") // 评论数
  likeCount      Int                  @default(0) @map("like_count") // 点赞数
  collectCount   Int                  @default(0) @map("collect_count") // 收藏数
  readCount      Int                  @default(0) @map("read_count") // 阅读数
  status         Int?                 @default(1) // 状态(0:草稿;1:审核中;2:审核通过;3审核失败;4:回收站)
  // type           Int?                 @default(1) // 文章类型 1原创 2转载   为原创的时候应该可以设置打赏
  // type           Int?                 @default(1) // 发布形式 1全部可见 2仅我可见 3粉丝可见
  author         User?                @relation(fields: [authorId], references: [id])
  authorId       Int?
  category       ArticleCategory?     @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  collects       UserArticleCollect[]
  comments       UserArticleComment[]
  articleLikes   UserArticleLike[]
  articleViews   UserArticleView[]
  articleReports UserArticleReport[]

  @@map("news_article")
}

// 用户文章收藏夹
model UserArticleFavorite {
  id         Int                  @id @default(autoincrement())
  createTime DateTime             @default(now()) @map("create_time")
  updateTime DateTime             @updatedAt @map("update_time")
  name       String
  user       User?                @relation(fields: [userId], references: [id])
  userId     Int
  collects   UserArticleCollect[]

  @@map("news_user_article_favorite")
}

// 用户文章收藏表
model UserArticleCollect {
  id         Int                  @id @default(autoincrement())
  createTime DateTime             @default(now()) @map("create_time")
  updateTime DateTime             @updatedAt @map("update_time")
  article    Article?             @relation(fields: [articleId], references: [id])
  articleId  Int
  favorite   UserArticleFavorite? @relation(fields: [favoriteId], references: [id])
  favoriteId Int

  @@map("news_user_article_collect")
}

// 用户文章评论表
model UserArticleComment {
  id            Int      @id @default(autoincrement())
  createTime    DateTime @default(now()) @map("create_time")
  updateTime    DateTime @updatedAt @map("update_time")
  parentId      Int?     @default(0) // 父id，父id为0说明评论文章，否则为回复评论
  content       String //评论内容
  isTop         Int?     @default(0) @map("is_top") // 置顶 0:否、1:是
  commentCount  Int?     @default(0) @map("comment_count") // 评论数
  likeCount     Int?     @default(0) @map("like_count") // 点赞数
  status        Int?     @default(2) // 是状态(1:审核中;2:审核通过;3审核失败;)
  article       Article? @relation(fields: [articleId], references: [id])
  articleId     Int //被评论的文章
  commentUser   User?    @relation("commentUser", fields: [commentUserId], references: [id])
  commentUserId Int //评论用户id
  replyUser     User?    @relation("replyUser", fields: [replyUserId], references: [id])
  replyUserId   Int //被回复的用户id

  @@map("news_user_article_comment")
}

// 用户文章点赞表
model UserArticleLike {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int
  article    Article? @relation(fields: [articleId], references: [id])
  articleId  Int

  @@map("news_user_article_like")
}

// 用户搜索表
model UserSearch {
  id          Int      @id @default(autoincrement())
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")
  searchCount Int      @default(1) @map("search_count") // 搜索的次数
  keywords    String //搜索关键词
  type        Int // 搜索类型 1 文章 2 用户 3 评论 4 专栏 5 问答
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int // 搜索的用户id

  @@map("news_user_search")
}

// 用户文章浏览表
model UserArticleView {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  viewCount  Int?     @default(1) @map("view_count") // 浏览的次数
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int // // 浏览文章的用户id
  article    Article? @relation(fields: [articleId], references: [id])
  articleId  Int //被浏览的文章id

  @@map("news_user_article_view")
}

// 文章举报表
model UserArticleReport {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  type       Int      @default(0) // 举报类型： 0-其他问题，1-标题夸张，2-低俗色情，3-错别字多，4-旧闻重复，5-广告软文，6-内容不实，7-涉嫌违法犯罪，8-侵权
  remark     String //举报描述文字
  status     Int?     @default(1) //审核状态(0:审核失败;1:审核中;2:审核完成,内容未违规,3:审核完成,内容违规已删除该文章)
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int // 举报的用户id
  article    Article? @relation(fields: [articleId], references: [id])
  articleId  Int //被举报的文章id

  @@map("news_user_article_report")
}

// 系统管理-数据管理-数据字典
// system-dm-dict
model SystemDmDict {
  id         Int                @id @default(autoincrement())
  createTime DateTime           @default(now()) @map("create_time")
  updateTime DateTime           @updatedAt @map("update_time")
  name       String //字典名称
  type       String             @unique //字典类型
  remark     String? //备注
  status     Boolean?           @default(true) //状态
  dictDatas  SystemDmDictData[]

  @@map("news_system_dm_dict")
}

// 系统管理-数据管理-字典数据
// system-dm-odictData
model SystemDmDictData {
  id         Int           @id @default(autoincrement())
  createTime DateTime      @default(now()) @map("create_time")
  updateTime DateTime      @updatedAt @map("update_time")
  label      String //数据标签
  value      String //数据键值
  class      String? //样式属性Class
  sort       Int?          @default(0) //顺序
  remark     String? //备注
  status     Boolean?      @default(true) //状态d
  colorType  String?       @default("default") @map("color_type") //颜色类型 success primary default info warning danger
  dict       SystemDmDict? @relation(fields: [dictId], references: [id])
  dictId     Int

  @@map("news_system_dm_dict_data")
}

// 系统管理-数据管理-数据分类
// system-dm-category
model SystemDmCategory {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  parentId   Int?     @default(0) @map("parent_id") // 父id 
  name       String //分类名称
  code       String? //分类编码
  level      Int?     @default(1) // 层级
  sort       Int?     @default(0) //顺序
  status     Boolean? @default(true) //状态
  remark     String? //备注

  @@map("news_system_dm_category")
}

// 系统管理-数据管理-参数管理
// system-dm-config
model SystemDmConfig {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  name       String //参数名称
  key        String //参数键名
  value      String //参数键值
  type       Boolean? @default(false) //系统内置
  remark     String? //备注

  @@map("news_system_dm_config")
}

// 系统管理-数据管理-行政区域
// system-dm-region
model SystemDmRegion {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  parentCode Int?     @default(0) @map("parent_code") //上级行政区域code
  name       String //行政区域名称
  code       Int      @unique //行政区域编码
  sort       Int?     @default(0) //显示排序

  @@map("news_system_dm_region")
}

// 系统管理-组织架构-机构管理 
// system-organization-org
model SystemOrganizationOrg {
  id         Int                      @id @default(autoincrement())
  createTime DateTime                 @default(now()) @map("create_time")
  updateTime DateTime                 @updatedAt @map("update_time")
  parentId   Int?                     @default(0) @map("parent_id") //上级id
  name       String //机构名称
  sort       Int?                     @default(0) // 排序
  leader     String? //负责人
  phone      String? //联系电话
  email      String? //邮箱
  status     Boolean?                 @default(true) //机构状态
  depts      SystemOrganizationDept[]
  posts      SystemOrganizationPost[]

  @@map("news_system_organization_org")
}

// 系统管理-组织架构-部门管理 
// system-organization-dept
model SystemOrganizationDept {
  id         Int                      @id @default(autoincrement())
  createTime DateTime                 @default(now()) @map("create_time")
  updateTime DateTime                 @updatedAt @map("update_time")
  parentId   Int?                     @default(0) @map("parent_id") //上级id
  name       String //部门名称
  sort       Int?                     @default(0) // 排序
  leader     String? //负责人
  phone      String? //联系电话
  email      String? //邮箱
  status     Boolean?                 @default(true) //状态
  org        SystemOrganizationOrg    @relation(fields: [orgId], references: [id])
  orgId      Int
  posts      SystemOrganizationPost[]

  @@map("news_system_organization_dept")
}

// 系统管理-组织架构-岗位管理 
// system-organization-post
model SystemOrganizationPost {
  id         Int                     @id @default(autoincrement())
  createTime DateTime                @default(now()) @map("create_time")
  updateTime DateTime                @updatedAt @map("update_time")
  name       String //部门名称
  code       String //岗位编码
  sort       Int?                    @default(0) // 排序
  remark     String? //备注
  status     Boolean?                @default(true) //状态
  org        SystemOrganizationOrg?  @relation(fields: [orgId], references: [id])
  orgId      Int
  dept       SystemOrganizationDept? @relation(fields: [deptId], references: [id])
  deptId     Int

  @@map("news_system_organization_post")
}

// 系统管理-权限管理-设备管理 
// system-permission-mobileDevice
model SystemPermissionMobileDevice {
  id          Int      @id @default(autoincrement())
  createTime  DateTime @default(now()) @map("create_time")
  updateTime  DateTime @updatedAt @map("update_time")
  deviceOs    String   @map("device_os") // 设备系统
  deviceNo    String   @map("device_no") // 设备编号
  deviceBrand String   @map("device_brand") // 设备品牌
  status      Boolean? @default(false) // '准入状态 true 准入 false不准入
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int

  @@map("news_system_permission_mobile_device")
}

// 系统管理-消息管理-通知公告 
// system-message-notice
model SystemMessageNotice {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now()) @map("create_time")
  updateTime DateTime @updatedAt @map("update_time")
  title      String // 公告标题
  type       Int // 公告类型
  status     Boolean? @default(true) // '状态 true 正常 false关闭
  content    String // 内容

  @@map("news_system_message_notice")
}

// 系统管理-消息管理-消息推送 
// system-message-push
model SystemMessagePush {
  id           Int       @id @default(autoincrement())
  createTime   DateTime  @default(now()) @map("create_time")
  updateTime   DateTime  @updatedAt @map("update_time")
  title        String // 推送标题
  content      String // 推送内容
  pushType     Int       @map("push_type") //推送类型 流程审批 通知公告， 等等
  receiveUser  Int[] // 接收人user ids
  sendUser     User?     @relation(fields: [sendUserId], references: [id]) // 发送人
  sendUserId   Int // 发送人id
  pushClientId String?   @map("push_client_id") // 推送客户端id
  pushChannel  Int?      @map("push_channel") // 推送渠道 app端 pc端 全端
  pcNotifyUrl  String?   @map("pc_notify_url") // pc通知地址
  appNotifyUrl String?   @map("app_notify_url") // app通知地址
  readNum      Int?      @default(0) @map("read_num") // 阅读次数
  readTime     DateTime? @map("read_time") //阅读时间

  @@map("news_system_message_push")
}

// 系统管理-日志管理-登录日志
// system-log-loginLog
model SystemLogLoginLog {
  id          Int      @id @default(autoincrement())
  loginTime   DateTime? @default(now()) @map("login_time") // 登录时间
  loginIp     String   @map("login_ip") //登录ip地址
  loginCity   String   @map("login_city") //登录城市地点
  browser     String //浏览器
  os          String //操作系统
  loginType   Int      @map("login_type") // '登录类型1账户密码登录 2扫码登录 3QQ登录 4微信登录 ',
  loginSource Int      @map("login_source") // '登录来源（0其它 1后台用户 2App用户 3小程序用户 4wap用户 5web端用户）',
  message     String //登录信息（登录成功）（登录失败）（退出成功）
  status      Int?     @default(1) //登录状态
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int //登录用户id
  @@map("news_system_log_login_log")
}


// 友情链接
// link
model Link {
  id          Int      @id @default(autoincrement())
  createTime   DateTime  @default(now()) @map("create_time")
  updateTime   DateTime  @updatedAt @map("update_time")
  url     String    //友情链接地址
  name   String    //友情链接名称
  email     String //站长EMAIL
  logo          String //友情链接logo
  status     Boolean? @default(true) // '状态 true 1显示 false不显示
  @@map("news_link")
}